package com.rns.healthplease.web.dao.domain;

// Generated 1 May, 2016 3:04:07 AM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;

/**
 * Appointments generated by hbm2java
 */
@Entity
@Table(name = "appointments")
public class Appointments implements java.io.Serializable {

	private Integer id;
	// private int userId;
	private Users user;
	// private int locId;
	private Locations locations;
	// private int labId;
	private Labs lab;
	private Date date;
	// private int slotId;
	private Slots slots;
	private String name;
	private String email;
	private String mobileNo;
	private Integer age;
	private String gender;
	private char isRequirePrint;
	private char isConfirmed;
	private Integer createdBy;
	private Date createdDate;
	private Integer updatedBy;
	private Date updatedDate;
	private Integer isDeleted;
	// private int statusId;
	private AppointmentStatus status;
	private String doctorName;
	private short cancelledBy;
	private Date cancelledDate;
	private short cancelledReasonId;
	private String cancelledLabRemark;
	private String cancelledAuthority;
	private String bookedBy;
	private String summary;
	private Set<AppointmentTests> tests = new HashSet<AppointmentTests>(0);

	public Appointments() {
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	/*
	 * @Column(name = "user_id", nullable = false) public int getUserId() {
	 * return this.userId; }
	 * 
	 * public void setUserId(int userId) { this.userId = userId; }
	 */

	/*
	 * @Column(name = "loc_id", nullable = false) public int getLocId() { return
	 * this.locId; }
	 * 
	 * public void setLocId(int locId) { this.locId = locId; }
	 */

	/*
	 * @Column(name = "lab_id", nullable = false) public int getLabId() { return
	 * this.labId; }
	 * 
	 * public void setLabId(int labId) { this.labId = labId; }
	 */

	@Temporal(TemporalType.DATE)
	@Column(name = "date", nullable = false, length = 10)
	public Date getDate() {
		return this.date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	/*
	 * @Column(name = "slot_id", nullable = false) public int getSlotId() {
	 * return this.slotId; }
	 * 
	 * public void setSlotId(int slotId) { this.slotId = slotId; }
	 */

	@Column(name = "name", nullable = false, length = 50)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "email", nullable = false, length = 50)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "mobile_no", nullable = false, length = 15)
	public String getMobileNo() {
		return this.mobileNo;
	}

	public void setMobileNo(String mobileNo) {
		this.mobileNo = mobileNo;
	}

	@Column(name = "is_require_print", nullable = false, length = 1)
	public char getIsRequirePrint() {
		return this.isRequirePrint;
	}

	public void setIsRequirePrint(char isRequirePrint) {
		this.isRequirePrint = isRequirePrint;
	}

	@Column(name = "is_confirmed", nullable = false, length = 1)
	public char getIsConfirmed() {
		return this.isConfirmed;
	}

	public void setIsConfirmed(char isConfirmed) {
		this.isConfirmed = isConfirmed;
	}

	@Column(name = "created_by")
	public Integer getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(Integer createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_date", nullable = false, length = 19)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	@Column(name = "updated_by")
	public Integer getUpdatedBy() {
		return this.updatedBy;
	}

	public void setUpdatedBy(Integer updatedBy) {
		this.updatedBy = updatedBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_date", nullable = false, length = 19)
	public Date getUpdatedDate() {
		return this.updatedDate;
	}

	public void setUpdatedDate(Date updatedDate) {
		this.updatedDate = updatedDate;
	}

	@Column(name = "is_deleted")
	public Integer getIsDeleted() {
		return this.isDeleted;
	}

	public void setIsDeleted(Integer isDeleted) {
		this.isDeleted = isDeleted;
	}

	/*
	 * @Column(name = "status_id", nullable = false) public int getStatusId() {
	 * return this.statusId; }
	 * 
	 * public void setStatusId(int statusId) { this.statusId = statusId; }
	 */

	@Column(name = "doctor_name", length = 100)
	public String getDoctorName() {
		return this.doctorName;
	}

	public void setDoctorName(String doctorName) {
		this.doctorName = doctorName;
	}

	@Column(name = "cancelled_by", nullable = false)
	public short getCancelledBy() {
		return this.cancelledBy;
	}

	public void setCancelledBy(short cancelledBy) {
		this.cancelledBy = cancelledBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "cancelled_date", nullable = false, length = 19)
	public Date getCancelledDate() {
		return this.cancelledDate;
	}

	public void setCancelledDate(Date cancelledDate) {
		this.cancelledDate = cancelledDate;
	}

	@Column(name = "cancelled_reason_id", nullable = false)
	public short getCancelledReasonId() {
		return this.cancelledReasonId;
	}

	public void setCancelledReasonId(short cancelledReasonId) {
		this.cancelledReasonId = cancelledReasonId;
	}

	@Column(name = "cancelled_lab_remark", nullable = false, length = 65535)
	public String getCancelledLabRemark() {
		return this.cancelledLabRemark;
	}

	public void setCancelledLabRemark(String cancelledLabRemark) {
		this.cancelledLabRemark = cancelledLabRemark;
	}

	@Column(name = "cancelled_authority", nullable = false, length = 50)
	public String getCancelledAuthority() {
		return this.cancelledAuthority;
	}

	public void setCancelledAuthority(String cancelledAuthority) {
		this.cancelledAuthority = cancelledAuthority;
	}

	@Column(name = "booked_by", nullable = false, length = 5)
	public String getBookedBy() {
		return this.bookedBy;
	}

	public void setBookedBy(String bookedBy) {
		this.bookedBy = bookedBy;
	}

	@Column(name = "summary", nullable = false, length = 65535)
	public String getSummary() {
		return this.summary;
	}

	public void setSummary(String summary) {
		this.summary = summary;
	}

	@ManyToOne(cascade = CascadeType.MERGE)
	@NotFound(action = NotFoundAction.IGNORE)
	@JoinColumn(name = "user_id")
	public Users getUser() {
		return user;
	}

	public void setUser(Users user) {
		this.user = user;
	}

	@ManyToOne(cascade = CascadeType.MERGE)
	@NotFound(action = NotFoundAction.IGNORE)
	@JoinColumn(name = "loc_id")
	public Locations getLocations() {
		return locations;
	}

	public void setLocations(Locations locations) {
		this.locations = locations;
	}

	@ManyToOne(cascade = CascadeType.MERGE)
	@NotFound(action = NotFoundAction.IGNORE)
	@JoinColumn(name = "lab_id")
	public Labs getLab() {
		return lab;
	}

	public void setLab(Labs lab) {
		this.lab = lab;
	}

	@ManyToOne(cascade = CascadeType.MERGE)
	@NotFound(action = NotFoundAction.IGNORE)
	@JoinColumn(name = "slot_id")
	public Slots getSlots() {
		return slots;
	}

	public void setSlots(Slots slots) {
		this.slots = slots;
	}

	@OneToOne(cascade = CascadeType.MERGE)
	@JoinColumn(name = "status_id")
	public AppointmentStatus getStatus() {
		return status;
	}

	public void setStatus(AppointmentStatus status) {
		this.status = status;
	}

	@OneToMany(mappedBy = "appointments", cascade = CascadeType.ALL)
	public Set<AppointmentTests> getTests() {
		return tests;
	}

	public void setTests(Set<AppointmentTests> tests) {
		this.tests = tests;
	}

	@Column(name = "age")
	public Integer getAge() {
		return age;
	}

	public void setAge(Integer age) {
		this.age = age;
	}

	@Column(name = "gender")
	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}
}
